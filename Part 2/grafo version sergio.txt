//grafo version Sergio 
#include <iostream>
#include <queue>
#include <vector>
#include <list>
#define MAXV 100 // Maxima cantidad de vertices.
#define oo 0x3f3f3f3f // Nuestro valor infinito.
using namespace std;

//puto si lo lee :D sexo
struct Edge
{
    int node; // El nodo destino de la arista.
    int cost; // El costo de la arista.
    Edge(int _node, int _cost) : node(_node), cost(_cost) {} // Constructor parametrizado.
    Edge() : node(-1), cost(-1) {} // Constructor por defecto.
};

struct Graph
{
    vector<Edge> G[MAXV]; // Lista de adyacencias.
    int V; // Cantidad de vertices.
    int E; // Cantidad de aristas.
};

struct State
{
    int node; // El nodo actual.
    int cost; // El costo del camino.
    State(int _node, int _cost) : node(_node), cost(_cost) {} // Constructor parametrizado.

    bool operator <(const State &b) const // Sobrecarga del operador de prioridad <.
    {
        return cost > b.cost;
    }
};

int algoritmo(const int begin, const int end, const Graph graph)
{
    priority_queue<State> pq;
    list <int> lali;
    list <int> camino;
    // La cola de prioridad.
    vector<int> Dist(graph.V, oo); // La distancia hacia todos los vertices. Inicialmente para cada vertice su valor es infinito.
    vector<bool> mark(graph.V, false); // Este arreglo nos permitira determinar los nodos procesados.
    //vector<int> marcados(graph.V, 0);

    Dist[begin] = 0; // Valor inicial del vertice de partida.
    pq.push(State(begin, 0)); // Agregamos el primer elemento, que no es mas que el vertice de partida.
    //cout<<pq.top().node+1<<endl;
    int res_costo = -1;
    int contador = 0 ;
    while(!pq.empty()) // Mientras existan vertices por procesar.
    {
        State st = pq.top();
        
       
           //;
        //cout<<"this"<<pq.top().node+1<<endl;
        pq.pop(); // Se desencola el elemento minimo.
        //cout<<pq.top().node+1<<endl;
        mark[st.node] = true; 
        if (st.node == end)
        {
            //lali.pop_back();
            //lali.pop_back();
            //lali.pop_front();
            lali.push_back(st.node+1);
           
            //cout<<"start"<<endl;

            /* for(it = lali.begin(); it != lali.end(); it++ ) {
                cout << *it++ << " ";
            }*/
            //cout << st.node+1 << " ";
            res_costo = st.cost; // Retornamos el valor del camino, hemos llegado al vertice destino.
            break;
        }

        int elegido=0;
        int T = (int)graph.G[st.node].size();
        for(int i = 0; i < T; ++i) // Se recorren las adyacencias de "a".
        {
            // Si no ha sido procesado el vertice "vi" y la distancia hacia "vi" es menor a la distancia
            // en Dist entonces hemos encontrado un camino mas corto a "vi".
            if (!mark[graph.G[st.node][i].node] && ((Dist[st.node] + graph.G[st.node][i].cost) < Dist[graph.G[st.node][i].node]))
            {
                Dist[graph.G[st.node][i].node] = st.cost + graph.G[st.node][i].cost;
                pq.push(State(graph.G[st.node][i].node, st.cost + graph.G[st.node][i].cost));
                //lali.push_back(st.node+1);
                elegido   = st.node+1;
                
               
                //lali.push_back(graph.G[st.node][i].cost);
                
            }
          /*else{
              lali.pop_back();
            }*/ 
            //cout <<*lali.end()<< " ";
            //cout<<pq.top().node+1<<" ";
        }
        if(elegido!=0)
        {
          lali.push_back(elegido);
        }

    }
    cout<<endl;
    
        list<int>::iterator cam=lali.begin();
        while( cam !=  lali.end())
        {
          graph.G[*cam][i].cost)
            cout << "\t" << *cam << " "; cam++;
        }
          cout<<endl;


        list<int>::iterator it_2=camino.begin();
        while( it_2 !=  camino.end())
        {
            cout << "\t" << *it_2 << " "; it_2++;
        }
          cout<<endl;
  
    int suma = 0;
    if(res_costo != 0)
    {
        list<int>::iterator it_3=camino.begin();
        while( it_3 !=  camino.end())
        {
          cout << "*it: " << *it_3 << endl;
          suma+=*it_3;
          it_3++;
        }
        int ultimo = lali.back();
        
        cout << "suma: " << suma << endl;
        if(suma != res_costo)
        {
          lali.pop_back();
          lali.pop_back();
          lali.push_back(ultimo);
        }
        list<int>::iterator it=lali.begin();
        while( it !=  lali.end())
        {
            cout << "\t" << *it << " "; it++;
        }
          cout<<endl;
    }
    
    return res_costo; // Si no se puede llegar al destino, retornar -1.
}



int main()
{
    Graph graph;
    cout << "Algoritmo de Dijkstra en C++" << endl;
    int comienzo, fin;
    graph.V = 5;
    graph.E = 8;
    graph.G[0].push_back(Edge(1, 2));
    graph.G[1].push_back(Edge(2, 3));
    graph.G[2].push_back(Edge(3, 4));
    graph.G[3].push_back(Edge(4, 5));
    graph.G[4].push_back(Edge(2, 3));
    graph.G[2].push_back(Edge(0, 4));
    graph.G[0].push_back(Edge(4, 10));
    graph.G[1].push_back(Edge(4, 7));


    for(int i=1 ; i < 6; i++)
    {
      for(int j = 1 ; j < 6 ; j++)
      {
        int n = algoritmo(i-1, j-1, graph);
        cout << "i: " << i<< " j: "<< j <<"---Longitud del Camino mas Corto: " << n << endl;
      }
    }



}